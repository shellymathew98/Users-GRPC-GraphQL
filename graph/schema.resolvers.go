package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"log"

	"github.com/shellymathew98/grpc-users/graph/model"
	pb "github.com/shellymathew98/grpc-users/users/proto"
	"google.golang.org/grpc"
)

const (
	address = "localhost:50051"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	conn, err := grpc.Dial(address, grpc.WithInsecure(),
		grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	client := pb.NewUserServiceClient(conn)

	req := &pb.UserInfo{Name: input.Name, Place: input.Place}
	res, err := client.CreateUser(ctx, req)
	if err != nil {
		return &model.User{}, fmt.Errorf("error while creating user: %v", err)
	}
	user := &model.User{
		ID: res.Value,
	}

	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdatedUser) (*model.Status, error) {
	conn, err := grpc.Dial(address, grpc.WithInsecure(),
		grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	client := pb.NewUserServiceClient(conn)

	req := &pb.UserInfo{Id: input.ID,
		Name: input.Name, Place: input.Place}
	res, err := client.UpdateUser(ctx, req)
	if err != nil {
		return &model.Status{Status: int(-1)}, fmt.Errorf("error while updating user: %v", err)
	}

	return &model.Status{Status: int(res.Value)}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input model.InputID) (*model.Status, error) {
	conn, err := grpc.Dial(address, grpc.WithInsecure(),
		grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	client := pb.NewUserServiceClient(conn)

	req := &pb.Id{Value: input.ID}          //prepare
	res, err := client.DeleteUser(ctx, req) //client procedure

	if err != nil {
		return &model.Status{Status: int(-1)}, fmt.Errorf("error while deleting user: %v", err)
	}

	return &model.Status{Status: int(res.Value)}, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, input string) (*model.User, error) {
	conn, err := grpc.Dial(address, grpc.WithInsecure(),
		grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	client := pb.NewUserServiceClient(conn)

	req := &pb.Id{Value: input}
	res, err := client.GetUser(ctx, req)

	if err != nil {
		return &model.User{}, fmt.Errorf("error while getting user: %v", err)
	}
	user := &model.User{
		ID:    res.Id,
		Name:  res.Name,
		Place: res.Place,
	}

	return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
